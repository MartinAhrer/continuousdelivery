import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

plugins {
    id 'base'
    id 'java'
    id 'java-test-fixtures'
    id 'groovy'
    id 'idea'
    id 'version-catalog'
    id 'maven-publish'
    alias (libs.plugins.hibernate)
    //id 'net.ltgt.apt' version '0.19'
    //id 'net.ltgt.apt-idea' version '0.19'
    alias(libs.plugins.benmanes.versions)
    alias(libs.plugins.asciidoctor.convert)
    alias(libs.plugins.bintray)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.jib)
    alias(libs.plugins.git.properties)
    alias(libs.plugins.grgit)
    alias(libs.plugins.cyclondx)
    alias(libs.plugins.graalvm.buildtools.native)
}

ext {
    javaVersion = 17
    snippetsDir = file('build/generated-snippets')
}


apply from: "${rootDir}/gradle/version.gradle"
apply from: "${rootDir}/gradle/docker/dockerfile.gradle"
apply from: "${rootDir}/gradle/docker/spring-boot-gitlab.gradle"
apply from: "${rootDir}/gradle/docker/jib.gradle"
apply from: "${rootDir}/gradle/outdated-dependency.gradle"

group = 'at.martinahrer'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

hibernate {
    enhancement {
        lazyInitialization true
        dirtyTracking true
        associationManagement true
    }
}

configurations {
    asciidoctorExt
}

dependencies {
    annotationProcessor(platform(SpringBootPlugin.BOM_COORDINATES))
    annotationProcessor(libs.lombok)
    annotationProcessor(libs.spring.boot.configuration.processor)

    implementation(platform(SpringBootPlugin.BOM_COORDINATES))
    implementation(libs.spring.boot.starter)
    implementation(libs.spring.boot.starter.actuator)
    implementation(libs.spring.boot.starter.data.jpa)
    implementation(libs.spring.boot.starter.data.rest)
    implementation(libs.spring.boot.starter.hateoas)
    implementation(libs.spring.boot.starter.validation)
    implementation(libs.spring.data.rest.webmvc)

    compileOnly(libs.jpa.api)
    compileOnly(libs.lombok)

    runtimeOnly(platform(SpringBootPlugin.BOM_COORDINATES))
    runtimeOnly(libs.bundles.logback)
    runtimeOnly(libs.h2database)
    runtimeOnly(libs.jcl.over.slf4j)
    runtimeOnly(libs.postgresql)
    runtimeOnly(libs.spring.boot.starter.logging)
    runtimeOnly(libs.spring.data.rest.hal.explorer)
    runtimeOnly(libs.logstash.logback.encoder)

    testFixturesImplementation(platform(libs.groovy.bom))
    testFixturesImplementation(libs.groovy)
    testFixturesImplementation(libs.groovy.json)

    asciidoctorExt(platform(SpringBootPlugin.BOM_COORDINATES))
    asciidoctorExt(libs.spring.restdocs.asciidoctor)
}

testing {
    suites {
        configureEach { suite->
            if (suite.name.endsWith("Test") || suite.name.equals ("test")) {
                useJUnitJupiter()
                useSpock(libs.versions.spock.get())
                dependencies {
                    implementation(project.dependencies.platform(libs.groovy.bom))
                    implementation(project.dependencies.platform(libs.spock.bom))
                    implementation(project.dependencies.platform(SpringBootPlugin.BOM_COORDINATES))
                    implementation(libs.groovy)
                    implementation(libs.groovy.json)
                    implementation(libs.spock.spring)
                    implementation(project.dependencies.testFixtures(project(":")))
                }
                targets {
                    all {
                        testTask.configure {
                            shouldRunAfter(test)
                        }
                    }
                }
            }
        }

        integrationTest(JvmTestSuite) {
            dependencies {
                implementation(libs.spring.boot.starter.test)
                implementation(libs.spring.web)
                implementation(libs.spring.test)
                runtimeOnly(libs.h2database)

            }
        }
        localIntegrationTest(JvmTestSuite) {
            dependencies {
                implementation(libs.spring.boot.starter)
                implementation(libs.spring.boot.starter.test) {
                    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
                }
                implementation(libs.spring.boot.starter.web)

                runtimeOnly(libs.h2database)
            }

        }
        docsTest(JvmTestSuite) {
            dependencies {
                implementation(libs.spring.boot.starter.data.jpa) // TODO why
                implementation(libs.spring.boot.starter.hateoas)
                implementation(libs.spring.boot.starter.json)
                implementation(libs.spring.boot.starter.test)
                implementation(libs.junit.jupiter.api)
                implementation(libs.spring.restdocs.mockmvc)
                implementation(libs.json.path)
                implementation(libs.hamcrest.library)

                runtimeOnly(libs.h2database)

                compileOnly(libs.asm)
            }
        }
    }
}

asciidoctor {
    attributes 'snippets': snippetsDir

    // https://docs.spring.io/spring-restdocs/docs/current/reference/html5/#getting-started-build-configuration
    configurations 'asciidoctorExt'
    inputs.dir snippetsDir
    dependsOn tasks.named('docsTest')
}

docsTest {
    outputs.dir snippetsDir
}

configurations.all {
    exclude group: 'com.vaadin.external.google', module: 'android-json' // conflicts with jackson
    exclude group: 'junit' // use junit 5, not 4 --> Spring rest docs is still requiring junit4
}

test {
    outputs.dir snippetsDir
}

tasks.withType(Test) {
    //useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}


// check: is it still required with ltgt
//idea {
//    project {
//        ipr {
//            withXml { provider ->
//                // Get XML as groovy.util.Node to work with.
//                def projectXml = provider.asNode()
//
//                // Find compiler configuration component.
//                def compilerConfiguration = projectXml.component.find { component ->
//                    component.'@name' == 'CompilerConfiguration'
//                }
//
//                // Replace current annotationProcessing
//                // that is part of the compiler configuration.
//                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
//                currentAnnotationProcessing.replaceNode {
//                    annotationProcessing {
//                        profile(name: 'Default', default: true, enabled: true) {
//                            processorPath(useClasspath: true)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

tasks.named('build').configure {
    dependsOn tasks.named('asciidoctor')
}

tasks.named('check').configure {
    dependsOn tasks.named('localIntegrationTest')
    dependsOn tasks.named('docsTest')
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['bootJava']

    pkg {
        repo = 'continuousdelivery'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/MartinAhrer/continuousdelivery.git'

        version {
            name = project.version
        }
    }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

springBoot {
    buildInfo()
}


graalvmNative {
    binaries {
        main {
            buildArgs.add('-O0')
        }
    }
}

apply from: "${rootDir}/gradle/publishing.gradle"


task installLocalGitHook(type: Copy) {
    def file = new File(rootProject.rootDir, 'git-hooks/pre-commit')
    inputs.files file

    def target = new File(rootProject.rootDir, '.git/hooks/')
    outputs.files new File(target, name)

    from file
    into {
        target
    }
    fileMode 0775
}

build.dependsOn installLocalGitHook
