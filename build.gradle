buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.7.2'
    }
}

plugins {
    id 'java'
    id 'java-test-fixtures'
    id 'groovy'
    id 'idea'
    id 'maven-publish'
    id 'net.ltgt.apt' version '0.19'
    id 'net.ltgt.apt-idea' version '0.19'
    id 'org.asciidoctor.convert' version '1.5.2'
    id 'org.unbroken-dome.test-sets' version '2.2.1'
    id 'com.jfrog.bintray' version '1.7'

    id 'org.springframework.boot' version '2.3.3.RELEASE'

    id 'com.google.cloud.tools.jib' version '2.5.0'
}

apply plugin: "io.spring.dependency-management"

repositories {
    mavenCentral()
}

group = 'at.martinahrer'
project.version = '0.1'

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

ext {
    spockVersion = '1.2-groovy-2.4'
    groovyVersion = '2.4.16'
    lombokVersion = '1.18.6'
    logbackVersion = '1.2.3'
    snippetsDir = file('build/generated-snippets')
}

ext['spock.version'] = spockVersion

testSets {
    localIntegrationTest
    integrationTest
    docsTest {
        dirName = 'docs'
    }
}

sourceSets {
    testFixtures {
        groovy {
            srcDir 'src/sharedTest/groovy'
        }
    }
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-data-rest")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-hateoas")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation('org.springframework.boot:spring-boot-starter-validation')
    runtime("org.springframework.boot:spring-boot-starter-logging")

    compile("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final")
    compile("org.projectlombok:lombok:$lombokVersion")

    runtime('org.springframework.data:spring-data-rest-hal-browser')

    runtime("org.postgresql:postgresql:9.4-1200-jdbc41") {
        exclude group: "org.slf4j", module: "slf4j-simple"
    }
    runtime("com.h2database:h2:1.4.191")

    runtime("net.logstash.logback:logstash-logback-encoder:4.9") {
        exclude group: "ch.qos.logback", module: "logback-core"
    }
    runtime("ch.qos.logback:logback-core:${logbackVersion}")
    runtime("ch.qos.logback:logback-classic:${logbackVersion}")
    runtime("org.slf4j:jcl-over-slf4j:1.7.25")

    testFixturesImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"

    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile("org.springframework:spring-test")
    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile "org.spockframework:spock-spring:$spockVersion"

    docsTestCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.2.RELEASE'
    docsTestCompile 'com.jayway.jsonpath:json-path'
    docsTestCompile 'org.hamcrest:hamcrest-library'

    docsTestCompile(testFixtures(project(":")))
    docsTestCompile("org.springframework.boot:spring-boot-starter-test")
    docsTestRuntime("com.h2database:h2:1.4.191")

    integrationTestCompile(testFixtures(project(":")))
    integrationTestCompile("org.springframework.boot:spring-boot-starter-test")
    integrationTestRuntime("com.h2database:h2:1.4.191")

    localIntegrationTestCompile(testFixtures(project(":")))
    localIntegrationTestCompile("org.springframework.boot:spring-boot-starter-test")
    localIntegrationTestCompile('org.springframework.boot:spring-boot')
    localIntegrationTestRuntime("com.h2database:h2:1.4.191")
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'ch.qos.logback' && details.requested.name.startsWith('logback-')) {
            //prefer different version which contains some necessary fixes
            details.useVersion logbackVersion
        }
    }
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn docsTest
}

// check: is it still required with ltgt
//idea {
//    project {
//        ipr {
//            withXml { provider ->
//                // Get XML as groovy.util.Node to work with.
//                def projectXml = provider.asNode()
//
//                // Find compiler configuration component.
//                def compilerConfiguration = projectXml.component.find { component ->
//                    component.'@name' == 'CompilerConfiguration'
//                }
//
//                // Replace current annotationProcessing
//                // that is part of the compiler configuration.
//                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
//                currentAnnotationProcessing.replaceNode {
//                    annotationProcessing {
//                        profile(name: 'Default', default: true, enabled: true) {
//                            processorPath(useClasspath: true)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

build.dependsOn asciidoctor
build.dependsOn localIntegrationTest

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/${System.getenv('CI_PROJECT_ID')}/packages/maven"
            name "GitLab"
            credentials(HttpHeaderCredentials) {
                name = 'Job-Token'
                value = System.getenv("CI_JOB_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

ext {
    dockerSrcDir = "$projectDir/src/main/docker"
    dockerBuildDir = "$buildDir/docker"
}

task buildDockerfile(type: Copy) {
    group = "Docker"
    description = "Prepare for building the image (create the Dockerfile, collect image files, etc.)"

    into dockerBuildDir

    from(dockerSrcDir) {
        filter(ReplaceTokens, tokens: [version: project.version as String])
    }
}

task buildDockerContext(type: Copy, dependsOn: buildDockerfile) {
    group = "Docker"
    description = "Prepare for building the image (create the Dockerfile, collect image files, etc.)"

    into dockerBuildDir

    with copySpec {
        from bootJar
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['bootJava']

    pkg {
        repo = 'continuousdelivery'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/MartinAhrer/continuousdelivery.git'

        version {
            name = project.version
        }
    }
}

task releaseVersion() {
    doLast {
        println project.version
    }
}

// Google Jib
jib {
    from {
        image = 'adoptopenjdk:11-jre-hotspot'
    }
    to {
        image = "martinahrer/${project.name}:${project.version}-jib"
    }
}

// Spring Boot Build Pack
bootBuildImage {
    imageName = "martinahrer/${project.name}:${project.version}"
    verboseLogging = true
}
