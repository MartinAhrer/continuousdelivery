import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

plugins {
    id 'base'
    id 'java'
    id 'java-test-fixtures'
    id 'groovy'
    id 'idea'
    id 'maven-publish'
    id 'version-catalog'
    //id 'net.ltgt.apt' version '0.19'
    //id 'net.ltgt.apt-idea' version '0.19'
    alias(libs.plugins.benmanes.versions)
    alias(libs.plugins.asciidoctor.convert)
    alias(libs.plugins.test.sets)
    alias(libs.plugins.bintray)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.jib)
    alias(libs.plugins.grgit)
    alias(libs.plugins.reckon) apply false
    alias(libs.plugins.cyclondx)
}

apply from: "${rootDir}/gradle/version.gradle"
apply from: "${rootDir}/gradle/docker/dockerfile.gradle"
apply from: "${rootDir}/gradle/docker/spring-boot-gitlab.gradle"
apply from: "${rootDir}/gradle/docker/jib.gradle"
apply from: "${rootDir}/gradle/outdated-dependency.gradle"

repositories {
    mavenCentral()
}

group = 'at.martinahrer'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext {
    snippetsDir = file('build/generated-snippets')
}


testSets {
    localIntegrationTest
    integrationTest
    docsTest {
        dirName = 'docs'
    }
}

docsTest {
    outputs.dir snippetsDir
}

configurations {
    asciidoctorExt
}

asciidoctor {
    attributes 'snippets': snippetsDir

    // https://docs.spring.io/spring-restdocs/docs/current/reference/html5/#getting-started-build-configuration
    configurations 'asciidoctorExt'
    inputs.dir snippetsDir
    dependsOn docsTest
}

sourceSets {
    testFixtures {
        groovy {
            srcDir 'src/sharedTest/groovy'
        }
    }
}

dependencies {
    annotationProcessor(platform(SpringBootPlugin.BOM_COORDINATES))
    annotationProcessor (libs.lombok)
    annotationProcessor(libs.spring.boot.configuration.processor)

    implementation(platform(SpringBootPlugin.BOM_COORDINATES))
    implementation(libs.spring.boot.starter)
    implementation(libs.spring.boot.starter.actuator)
    implementation(libs.spring.boot.starter.data.jpa)
    implementation(libs.spring.boot.starter.data.rest)
    implementation(libs.spring.boot.starter.hateoas)
    implementation(libs.spring.boot.starter.validation)
    implementation(libs.spring.data.rest.webmvc)

    compileOnly(libs.jpa.api)
    compileOnly(libs.lombok)

    runtimeOnly(platform(SpringBootPlugin.BOM_COORDINATES))
    runtimeOnly(libs.bundles.logback)
    runtimeOnly(libs.h2database)
    runtimeOnly(libs.jcl.over.slf4j)
    runtimeOnly(libs.postgresql)
    runtimeOnly(libs.spring.boot.starter.logging)
    runtimeOnly(libs.spring.data.rest.hal.explorer)
    runtimeOnly (libs.logstash.logback.encoder)

    testFixturesImplementation(libs.groovy)
    testFixturesImplementation(libs.groovy.json)

    asciidoctorExt(platform(SpringBootPlugin.BOM_COORDINATES))
    asciidoctorExt(libs.spring.restdocs.asciidoctor)

    docsTestImplementation(libs.groovy)
    docsTestImplementation(libs.groovy.json)
    docsTestCompileOnly(libs.asm)
    docsTestImplementation(libs.junit.jupiter.api)
    docsTestImplementation(libs.junit.vintage.engine)
    docsTestImplementation (libs.spring.restdocs.mockmvc)
    docsTestImplementation (libs.json.path)
    docsTestImplementation (libs.hamcrest.library)
    docsTestImplementation(libs.spring.boot.starter.test)
    docsTestRuntimeOnly(libs.h2database)
    docsTestImplementation(testFixtures(project(":")))

    integrationTestImplementation(libs.groovy)
    integrationTestImplementation(libs.groovy.json)
    integrationTestImplementation(libs.spock.spring)
    integrationTestImplementation(libs.spring.boot.starter.test)
    integrationTestImplementation(libs.spring.test)
    integrationTestRuntimeOnly(libs.h2database)
    integrationTestImplementation(testFixtures(project(":")))
    addSpockDependencies(it, 'integrationTest')

    localIntegrationTestImplementation(libs.spock.spring)
    localIntegrationTestImplementation(libs.groovy)
    localIntegrationTestImplementation(libs.groovy.json)
    localIntegrationTestImplementation(libs.spring.boot.starter)
    localIntegrationTestImplementation(libs.spring.boot.starter.test)
    localIntegrationTestRuntimeOnly(libs.h2database)
    localIntegrationTestImplementation(testFixtures(project(":")))
    addSpockDependencies(it, 'localIntegrationTest')
}

configurations
        .findAll { (it.name == 'testImplementation' || it.name == 'testFixturesImplementation' || it.name.endsWith('TestImplementation')) }
        .each {
            project.dependencies.add(it.name, project.dependencies.platform(libs.spock.bom))
        }

def addSpockDependencies(DependencyHandler dependencies, String testType) {
    dependencies.add("${testType}Implementation", libs.groovy)
    dependencies.add("${testType}Implementation", libs.spock)
    dependencies.add("${testType}RuntimeOnly", libs.bundles.spockClassMocking)
}

configurations.all {
    exclude group: 'com.vaadin.external.google', module: 'android-json' // conflicts with jackson
    //exclude group: 'junit' // use junit 5, not 4 --> Spring rest docs is still requiring junit4
}

test {
    outputs.dir snippetsDir
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}


// check: is it still required with ltgt
//idea {
//    project {
//        ipr {
//            withXml { provider ->
//                // Get XML as groovy.util.Node to work with.
//                def projectXml = provider.asNode()
//
//                // Find compiler configuration component.
//                def compilerConfiguration = projectXml.component.find { component ->
//                    component.'@name' == 'CompilerConfiguration'
//                }
//
//                // Replace current annotationProcessing
//                // that is part of the compiler configuration.
//                def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
//                currentAnnotationProcessing.replaceNode {
//                    annotationProcessing {
//                        profile(name: 'Default', default: true, enabled: true) {
//                            processorPath(useClasspath: true)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

tasks.named('build').configure {
    dependsOn tasks.named('asciidoctor')
}

tasks.named('check').configure {
    dependsOn tasks.named('localIntegrationTest')
    dependsOn tasks.named('docsTest')
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['bootJava']

    pkg {
        repo = 'continuousdelivery'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/MartinAhrer/continuousdelivery.git'

        version {
            name = project.version
        }
    }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}


apply from: "${rootDir}/gradle/publishing.gradle"
